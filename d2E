#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys

def parse_vasp(filePath):
    """Parses the D-Matrix information from filePath in VASP format

    :filePath: A file of OUTCAR format
    :returns: 1 if something went wrong

    """
    import re
    vprint("Parsing VASP format from '%s'"%filePath)

    # DELIMITERS TO GREP
    delimiter_up="D_diag"
    lines_delimiter=5
    # GREP
    GREP = "grep  '%s' -A %d %s "%( delimiter_up, lines_delimiter, filePath)
    vprint(GREP)
    fd = os.popen(GREP)
    table = fd.read()
    fd.close()

    if not table:
        raise Exception("No Information to be found in %s"%filePath)
        sys.exit(1)
    table_list = table.split("\n")
    vprint("Information retreived:\n\n%s"%table)
    diagonal = []
    TABLE_REGEX = re.compile("\s+?(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)\s+(-?\d+\.?\d*)")
    for row in table_list:
        match = TABLE_REGEX.match(row)
        if match:
            diagonal_element = float(match.group(1))
            diagonal+=[diagonal_element]
            vprint("Regex Match!\n\t\t Element = %s"%diagonal_element)
        else:
            continue
    if len(diagonal)==3:
        vprint("Diagonal elements are: %s"%diagonal)
    else:
        raise Exception("Parsing diagonal elements, we do not have enough retrieved, only %d diagonal elements"%len(diagonal))
        sys.exit(1)
    dmatrix = DMatrix(*diagonal)
    dmatrix.printEnergies()

def mhzToCm_1(mhz):
    """Conversion from mhz into cm^-1
    [http://physics.nist.gov/PhysRefData/wavenum/html/tables.html]
    """
    return mhz/29979.2458

class DMatrix(object):

    """
    Implementation of the D-Matrix
    The units are by default in MHz
    """

    def __init__(self, Dx, Dy, Dz):
        self.Dx = Dx
        self.Dy = Dy
        self.Dz = Dz
    def getE(self, units="MHz"):
        """
        E = \frac{Dy - Dx}{2}
                 Dy - Dx
             E = ───────
                    2   
        :returns: E parameter

        """
        value = (self.Dy - self.Dx)/2
        if units == "MHz":
            return value
        elif units == "cm-1":
            return mhzToCm_1(value)
    def getD(self, units="MHz"):
        """
        D = \frac{3}{2} Dz
                 3
             D = ─ Dz
                 2
        :returns: D parameter

        """
        value = 3/2*self.Dz
        if units == "MHz":
            return value
        elif units == "cm-1":
            return mhzToCm_1(value)
    def Ex(self, units="MHz"):
        """
        Energy of the x eigenvector
        \frac{D}{3} + (-E)
             D
             ─ + (-E)
             3
        """
        return self.getD(units)/3 - self.getE(units)
    def Ey(self, units="MHz"):
        """
        Energy of the y eigenvector
        \frac{D}{3} - (-E)
             D
             ─ - (-E)
             3
        """
        return self.getD(units)/3 + self.getE(units)
    def Ez(self, units="MHz"):
        """
        Energy of the z eigenvector
        -2\frac{D}{3}
               D
             -2─
               3
        """
        return -2*self.getD(units)/3 
    def getEnergies(self, units="MHz"):
        return {"x":self.Ex(units), "y":self.Ey(units),"z":self.Ez(units)}
    def printEnergies(self, units):
        title = "\n\nEnrgies from the D = Diag(%s, %s, %s) matrix"%(self.Dx, self.Dy, self.Dz)
        print(title)
        print("~"*len(title))
        energies = self.getEnergies()
        for label in energies:
            print("%s ----> %s"%(label, energies[label]) )

        #COEFFICIENTS
        title = "\nCoefficients"
        print(title)
        print("="*len(title))
        print("%s ----> %s"%("E", self.getE()))
        print("%s ----> %s"%("D", self.getD()))


        # ENERGY DIFFERENCES
        title = "\nEnergy differences"
        print(title)
        print("="*len(title))
        e1="x"
        e2="y"
        print("|%s - %s| = %s"%(e1, e2, abs(energies[e1]-energies[e2])))
        e1="x"
        e2="z"
        print("|%s - %s| = %s"%(e1, e2, abs(energies[e1]-energies[e2])))
        e1="y"
        e2="z"
        print("|%s - %s| = %s"%(e1, e2, abs(energies[e1]-energies[e2])))

def vprint(arg1):
    """
    Verbose print
    """
    if VERBOSE:
        print("===> d2E:: %s"%arg1)


############################
#  COMMAND LINE INTERFACE  #
############################

import argparse

parser = argparse.ArgumentParser(description="D-matrix to Energy converter")

parser.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")
parser.add_argument("-f", help="Input file where the matrix is.", action="store")
parser.add_argument("--format", help="Format in which the matrix is saved (default vasp)", action="store", default="vasp")


if __name__=="__main__" :
    args = parser.parse_args()

    if args.verbose:
        print("Making the output verbose...")
        VERBOSE=True
    else:
        VERBOSE=False

    MATRIX_FILE = args.f
    if args.format == "vasp":
        vprint("Using VASP format")
        parse_vasp(MATRIX_FILE)

